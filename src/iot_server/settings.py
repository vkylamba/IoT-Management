
"""
Django settings for iot_server project.

Generated by 'django-admin startproject' using Django 1.8.

For more information on this file, see
https://docs.djangoproject.com/en/1.8/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.8/ref/settings/
"""

from __future__ import absolute_import, unicode_literals

import datetime
import logging
# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
import os
import socket

import dj_database_url
import environ
import sentry_sdk
from sentry_sdk.integrations.django import DjangoIntegration

env = environ.Env()
environ.Env.read_env('iot_server/.env')

PROJECT_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
BASE_DIR = os.path.dirname(PROJECT_DIR)

DEBUG = env.bool('DJANGO_DEBUG', default=True)

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.8/howto/deployment/checklist/


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]

THIRD_PARTY_APPS = [
    'rest_framework',
    'rest_framework.authtoken',
    'ckeditor',
    'geoposition',
    'django_extensions',
    # 'corsheaders'
    'django_celery_results',
    'django_celery_beat',

    # For Social auth
    'django.contrib.sites',
    'allauth',
    'allauth.account',
    'rest_auth',
    'rest_auth.registration',

    'allauth.socialaccount',
    'allauth.socialaccount.providers.facebook',
    'allauth.socialaccount.providers.twitter',
    'allauth.socialaccount.providers.github',

    'django_clickhouse',
    'channels',
    
    # Yet another Swagger generator
    'drf_yasg'
]

LOCAL_APPS = [
    'device',
    'api',
    'notification',
    'event',
    'dashboard',
]

DEV_APPS = [
    'silk'
]

INSTALLED_APPS += THIRD_PARTY_APPS + LOCAL_APPS

if DEBUG:
    INSTALLED_APPS += DEV_APPS

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    # 'social_django.middleware.SocialAuthExceptionMiddleware',
]

if DEBUG:
    MIDDLEWARE = [
        'silk.middleware.SilkyMiddleware',
    ] + MIDDLEWARE

ROOT_URLCONF = 'iot_server.urls'

WSGI_APPLICATION = 'iot_server.wsgi.application'
ASGI_APPLICATION = "iot_server.routing.application"

postgres_db = {
    'ENGINE': 'django.db.backends.postgresql_psycopg2',
    'NAME': env("POSTGRES_DB", default=''),
    'USER': env("POSTGRES_USER", default=''),
    'PASSWORD': env("POSTGRES_PASSWORD", default=''),
    'HOST': env("DJANGO_DB_HOST", default=''),
    'PORT': env("DJANGO_DB_PORT", default=5432),
}

DJ_DATABASE = env('DJ_DATABASE', default=False)
if not DJ_DATABASE:
    DATABASES = {
        'default': postgres_db
    }
else:
    DATABASES = {
        'default': dj_database_url.config(conn_max_age=600)
    }

# Internationalization
# https://docs.djangoproject.com/en/1.8/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.8/howto/static-files/

STATICFILES_FINDERS = [
    'django.contrib.staticfiles.finders.FileSystemFinder',
    'django.contrib.staticfiles.finders.AppDirectoriesFinder',
]

STATICFILES_DIRS = [
    # os.path.join(BASE_DIR, 'static'),
]

STATIC_ROOT = '/home/application/static'
STATIC_URL = '/static/'

MEDIA_ROOT = '/home/application/media'
MEDIA_URL = '/media/'

REST_FRAMEWORK = {
    # 'DEFAULT_PERMISSION_CLASSES': ('rest_framework.permissions.IsAdminUser',),
    # 'PAGE_SIZE': 10,
    'DEFAULT_AUTHENTICATION_CLASSES': (
        # 'rest_framework.authentication.BasicAuthentication',
        # 'rest_framework.authentication.SessionAuthentication',
        'rest_framework.authentication.TokenAuthentication',
        'device.authentication.DeviceAuthentication',
    )
}

LOGIN_URL = 'login'
LOGOUT_URL = 'logout'
LOGIN_REDIRECT_URL = ''

AUTH_USER_MODEL = 'device.User'

# Auto email settings
EMAIL_HOST = env('EMAIL_HOST', default='')
EMAIL_HOST_USER = env('EMAIL_HOST_USER', default='')
EMAIL_HOST_PASSWORD = env('EMAIL_HOST_PASSWORD', default='')
EMAIL_PORT = env('EMAIL_PORT', default='')
EMAIL_USE_TLS = env('EMAIL_USE_TLS', default='')

# CK editor settings
CKEDITOR_JQUERY_URL = '//ajax.googleapis.com/ajax/libs/jquery/2.1.1/jquery.min.js'
CKEDITOR_UPLOAD_PATH = "uploads/"

CELERY_ACTIVE = True

# GEOPOSITION
GEOPOSITION_GOOGLE_MAPS_API_KEY = env('GEOPOSITION_GOOGLE_MAPS_API_KEY', default='')

HOSTNAME = socket.gethostname()


class TimestampFilter(logging.Filter):
    """
        Custom timestamp filter for logging.
    """
    def filter(self, record):
        time_now = datetime.datetime.utcnow()
        record.timestamp = time_now.isoformat() + "+00:00"
        return True


class ExecpathFilter(logging.Filter):
    """
        Custom ExecpathFilter filter for logging.
    """
    def filter(self, record):

        if record.funcName == 'handle_uncaught_exception':
            exc_info = record.exc_info
            if len(exc_info) > 2:
                current_tb = exc_info[2]
                last_tb = None
                while current_tb != None:
                    last_tb = current_tb
                    current_tb = current_tb.tb_next
                if last_tb:
                    record.execpath = last_tb.tb_frame.f_code.co_filename
                    record.execline = last_tb.tb_lineno
                    if record.exc_text:
                        msg_list = record.exc_text.split('\n')
                        record.execmsg = msg_list[-1].strip()
                        record.exc_text = 'IGNORE: ' + record.execmsg
                    else:
                        record.execmsg = str(exc_info[1])
                        record.exc_text = str(exc_info[0])
                    return True
        return False


LOGGING_DIR = env('LOGGING_DIR', default='logs')
LOGGING = {
    'version': 1,
    'disable_existing_loggers': not DEBUG,
    'filters': {
        'require_debug_false': {
            '()': 'django.utils.log.RequireDebugFalse',
        },
        'require_debug_true': {
            '()': 'django.utils.log.RequireDebugTrue',
        },
        'execpath': {
            '()': ExecpathFilter,
        },
        'timestamp': {
            '()': TimestampFilter,
        },
    },

    'formatters': {
        'simple': {
            'format': '[%(asctime)s] %(levelname)s %(message)s',
            'datefmt': '%Y-%m-%d %H:%M:%S'
        },
        'verbose': {
            'format': '[%(timestamp)s] [{env_name}] [%(levelname)s] [%(pathname)s:%(lineno)d] %(message)s'.format(env_name=env('ENV_NAME', default="developer_docker")),
            'datefmt': '%Y-%m-%d %H:%M:%S'
        },
        'default': {
            'format': '[%(timestamp)s] [{env_name}] [%(levelname)s] [%(execpath)s:%(execline)d] %(execmsg)s'.format(env_name=env('ENV_NAME', default="developer_docker")),
            'datefmt': '%Y-%m-%d %H:%M:%S'
        },
    },

    'handlers': {
        'default': {
            'level': 'DEBUG',
            'filters': ['timestamp', 'execpath'],
            'class': 'logging.StreamHandler',
            # 'class': 'logging.FileHandler',
            # 'filename': '{}/django.log'.format(LOGGING_DIR),
            'formatter': 'default'
        },
        'app': {
            'level': 'DEBUG',
            'filters': ['timestamp'],
            'class': 'logging.StreamHandler',
            # 'class': 'logging.FileHandler',
            # 'filename': '{}/django.log'.format(LOGGING_DIR),
            'formatter': 'verbose'
        },
        'console': {
            'level': 'DEBUG',
            'filters': ['require_debug_true'],
            'class': 'logging.StreamHandler',
            'formatter': 'simple'
        }
    },
    'loggers': {
        'django.db.backends': {
            'level': 'ERROR',
            'handlers': ['console'],
            'propagate': False,
        },
        'django.request': {
            'handlers': ['console', 'default'],
            'propagate': False
        },
        'async_tasks': {
            'level': 'DEBUG',
            'handlers': ['console', 'default'],
            'propagate': False,
        },
        'application': {
            'level': 'DEBUG',
            'handlers': ['console', 'app', 'default'],
            'propagate': False,
        }
    },
}

ALLOWED_HOSTS = env.list("DJANGO_ALLOWED_HOSTS", default=['*', ])

# Sentry Configurations
sentry_sdk.init(
    dsn= env('SENTRY_DSN', default=''),
    integrations=[
        DjangoIntegration(),
    ],

    # Set traces_sample_rate to 1.0 to capture 100%
    # of transactions for performance monitoring.
    # We recommend adjusting this value in production.
    traces_sample_rate=0,

    # If you wish to associate users to errors (assuming you are using
    # django.contrib.auth) you may enable sending PII data.
    send_default_pii=True
)
# Permissions config
PERMISSIONS_SUPER_USER = "PERMISSIONS_SUPER_USER"
PERMISSIONS_ADMIN = "PERMISSIONS_ADMIN"
PERMISSIONS_DEV_USER = "PERMISSIONS_DEV_USER"

# Openweathermap API key
OPENWEATHERMAP_API_KEY = env("OPENWEATHERMAP_API_KEY", default="")

if env("REDIS_URL", default=False):
    CACHES = {
        "default": {
            "BACKEND": "django_redis.cache.RedisCache",
            "LOCATION": f'redis://{env("REDIS_URL")}',
            "OPTIONS": {
                "CLIENT_CLASS": "django_redis.client.DefaultClient",
            }
        }
    }
else:
    CACHES = {
        'default': {
            'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
            'LOCATION': 'unique-snowflake',
        }
    }

CORS_ORIGIN_ALLOW_ALL = True

CHANNEL_LAYERS = {
    'default': {
        'BACKEND': 'channels_redis.core.RedisChannelLayer',
        'CONFIG': {
            "hosts": [(env("REDIS_URL"), 6379)],
        },
    },
}

# Celery settings

BROKER_URL = f'redis://{env("REDIS_URL", default="redis")}'

#: Only add pickle to this list if your broker is secured
#: from unwanted access (see userguide/security.html)
CELERY_ACCEPT_CONTENT = ['pickle', 'json', 'msgpack', 'yaml']
CELERY_RESULT_BACKEND = 'django-db'
CELERY_TASK_SERIALIZER = "pickle"


TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            'templates'
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                # Insert your TEMPLATE_CONTEXT_PROCESSORS here or use this
                # list if you haven't customized them:
                'django.contrib.auth.context_processors.auth',
                'django.template.context_processors.debug',
                'django.template.context_processors.i18n',
                'django.template.context_processors.media',
                'django.template.context_processors.static',
                'django.template.context_processors.tz',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

# For Social auth
SITE_ID = 1

SOCIALACCOUNT_EMAIL_VERIFICATION = 'none'
SOCIALACCOUNT_EMAIL_REQUIRED = False
SOCIALACCOUNT_QUERY_EMAIL = True

SERVER_URL = env("SERVER_URL", default="")

TIME_FORMAT_STRING = "%Y-%m-%dT%H:%M:%SZ"
DEVICE_PROPERTY_UPDATE_DELAY_MINUTES = 10
WEATHER_DATA_CACHE_MINUTES = 30
DEFAULT_SYNC_FREQUENCY_MINUTES = 10

# django-clickhouse library setup
CLICKHOUSE_DATABASES = {
    'default': {
        'db_url': f'http://{env("CLICKHOUSE_DATABASE_HOST")}:{env("CLICKHOUSE_DATABASE_PORT")}',
        'db_name': env("CLICKHOUSE_DATABASE_NAME"),
        'username': env("CLICKHOUSE_DATABASE_USERNAME"),
        'password': env("CLICKHOUSE_DATABASE_PASSWORD"),
        'migrate': True
    }
}
CLICKHOUSE_REDIS_CONFIG = {
    'host': env("REDIS_URL", default="redis"),
    'db': 0
}
CLICKHOUSE_CELERY_QUEUE = 'celery'

SUPERSET_URL = env("SUPERSET_URL", default="http://localhost:8088")
SUPERSET_USERNAME = env("SUPERSET_USERNAME", default="admin")
SUPERSET_PASSWORD = env("SUPERSET_PASSWORD", default="admin")

if DEBUG:
    SILKY_PYTHON_PROFILER = True
    SILKY_PYTHON_PROFILER_RESULT_PATH = "/var/profiler"


SECRET_KEY = env("SECRET_KEY", default="*$%^&_____SECRET_KEY_____&^%$*")

TELEGRAM_BOT_TOKEN = env("TELEGRAM_BOT_TOKEN", default="")
