# Generated by Django 2.2 on 2020-10-10 20:48

import device.models.device
from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
import django.contrib.postgres.fields.jsonb
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import geoposition.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('city', models.CharField(blank=True, max_length=255, null=True)),
                ('country', models.CharField(blank=True, max_length=255, null=True)),
                ('phone', models.CharField(blank=True, max_length=255, null=True)),
                ('postal_code', models.CharField(blank=True, max_length=255, null=True)),
                ('description', models.CharField(help_text='Desc of the user', max_length=500)),
                ('subnet_mask', models.CharField(help_text='Subnet mask', max_length=20)),
                ('dev_image', models.ImageField(blank=True, help_text='Avatar of the device', null=True, upload_to=device.models.device.get_image_path)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='DevCommand',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('command_name', models.CharField(help_text='Name of command.', max_length=255)),
                ('command_code', models.CharField(help_text='Command code.', max_length=20)),
            ],
        ),
        migrations.CreateModel(
            name='Device',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ip_address', models.CharField(help_text='IP address of the device', max_length=20)),
                ('alias', models.CharField(help_text='Name of the device', max_length=255)),
                ('installation_date', models.DateField(blank=True, help_text="Device's installation date", null=True)),
                ('device_contact_number', models.CharField(blank=True, help_text='Contact number of the device.', max_length=20, null=True)),
                ('avatar', models.ImageField(blank=True, help_text='Avatar of the device', null=True, upload_to=device.models.device.get_image_path)),
                ('position', geoposition.fields.GeopositionField(blank=True, max_length=42, null=True)),
                ('address', models.TextField(blank=True, null=True)),
                ('access_token', models.CharField(blank=True, max_length=40, null=True)),
                ('other_data', django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True)),
                ('commands', models.ManyToManyField(to='device.DevCommand')),
            ],
        ),
        migrations.CreateModel(
            name='DeviceType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(choices=[('Home', 'Home'), ('Charge Controller', 'Charge Controller'), ('DELTA-RPI Inverter', 'DELTA-RPI Inverter')], help_text='Type name', max_length=50)),
                ('details', models.TextField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Equipment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name of the equipment', max_length=255)),
                ('max_power', models.IntegerField(help_text='Max power consumption of the equipment')),
                ('min_power', models.IntegerField(help_text='Min power consumption of the equipment')),
            ],
            options={
                'verbose_name': 'Equipment',
                'verbose_name_plural': 'Equipments',
            },
        ),
        migrations.CreateModel(
            name='Meter',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('meter_type', models.CharField(choices=[('AC_METER', 'AC_METER'), ('DC_METER', 'DC_METER'), ('HOUSEHOLD_AC_METER', 'HOUSEHOLD_AC_METER'), ('INVETER_AC_METER', 'INVETER_AC_METER'), ('INVETER_DC_METER', 'INVETER_DC_METER')], max_length=50)),
                ('device', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='device.Device')),
            ],
        ),
        migrations.CreateModel(
            name='Operator',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name of the branch', max_length=100)),
                ('address', models.CharField(help_text='Address of the branch', max_length=500)),
                ('pin_code', models.IntegerField(help_text='PIN code')),
                ('contact_number', models.CharField(help_text='Contact number', max_length=20)),
                ('avatar', models.ImageField(blank=True, help_text='Avatar of the operator', null=True, upload_to=device.models.device.get_image_path)),
            ],
        ),
        migrations.CreateModel(
            name='Permission',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
            ],
        ),
        migrations.CreateModel(
            name='WeatherData',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('data_arrival_time', models.DateTimeField()),
                ('temperature', models.IntegerField(blank=True, null=True)),
                ('humidity', models.IntegerField(blank=True, null=True)),
                ('wind_speed', models.IntegerField(blank=True, null=True)),
                ('more_data', django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True)),
                ('device', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='device.Device')),
            ],
        ),
        migrations.CreateModel(
            name='MeterData',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('data_arrival_time', models.DateTimeField()),
                ('voltage', models.FloatField(blank=True, null=True)),
                ('current', models.FloatField(blank=True, null=True)),
                ('power', models.FloatField(blank=True, null=True)),
                ('frequency', models.FloatField(blank=True, null=True)),
                ('energy', models.BigIntegerField(blank=True, null=True)),
                ('runtime', models.BigIntegerField(blank=True, null=True)),
                ('temperature', models.IntegerField(blank=True, null=True)),
                ('latitude', models.CharField(blank=True, max_length=20, null=True)),
                ('longitude', models.CharField(blank=True, max_length=20, null=True)),
                ('state', models.IntegerField(blank=True, null=True)),
                ('more_data', django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True)),
                ('meter', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='device.Meter')),
            ],
            options={
                'verbose_name_plural': 'Meter Data',
            },
        ),
        migrations.CreateModel(
            name='DeviceProperty',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('value', models.CharField(max_length=255)),
                ('val_type', models.CharField(choices=[('I', 'Int'), ('F', 'Float'), ('S', 'String')], default='S', max_length=255)),
                ('device', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='device.Device')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Device Property',
                'verbose_name_plural': 'Device Properties',
            },
        ),
        migrations.CreateModel(
            name='DeviceEquipment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.IntegerField()),
                ('device', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='device.Device')),
                ('equipment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='device.Equipment')),
            ],
            options={
                'verbose_name': 'Device Equipment',
                'verbose_name_plural': 'Device Equipments',
            },
        ),
        migrations.AddField(
            model_name='device',
            name='operator',
            field=models.ForeignKey(blank=True, help_text='Operator of the device', null=True, on_delete=django.db.models.deletion.CASCADE, to='device.Operator'),
        ),
        migrations.AddField(
            model_name='device',
            name='types',
            field=models.ManyToManyField(to='device.DeviceType'),
        ),
        migrations.CreateModel(
            name='DerivedData',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name of the variable', max_length=50)),
                ('dependent1', models.CharField(help_text='Name of the variable on which it depends', max_length=20)),
                ('cofficient', models.DecimalField(decimal_places=10, help_text='Value of the cofficient', max_digits=15)),
                ('offset', models.DecimalField(decimal_places=3, help_text='Value of the offset', max_digits=5)),
                ('device', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='device.Device')),
            ],
        ),
        migrations.CreateModel(
            name='Command',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(help_text="Command's status(E:Executed or P:Pending)", max_length=1)),
                ('command_in_time', models.DateTimeField(help_text='Command arrival time')),
                ('command_read_time', models.DateTimeField(blank=True, help_text='Time when the command was read by the remote device', null=True)),
                ('command', models.CharField(help_text='Command', max_length=20)),
                ('param', models.CharField(help_text='Command parameter', max_length=100)),
                ('device', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='device.Device')),
            ],
        ),
        migrations.AddField(
            model_name='user',
            name='permissions',
            field=models.ManyToManyField(to='device.Permission'),
        ),
        migrations.AddField(
            model_name='user',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
        migrations.CreateModel(
            name='RawData',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('data_arrival_time', models.DateTimeField()),
                ('data', django.contrib.postgres.fields.jsonb.JSONField()),
                ('device', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='device.Device')),
            ],
            options={
                'verbose_name_plural': 'Raw Data',
                'unique_together': {('device', 'data_arrival_time')},
            },
        ),
        migrations.AlterUniqueTogether(
            name='device',
            unique_together={('ip_address',)},
        ),
    ]
